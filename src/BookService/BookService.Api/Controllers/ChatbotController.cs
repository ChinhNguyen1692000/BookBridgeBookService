using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using BookService.Infracstructure.DBContext;
using BookService.Domain.Entities;
using System.Linq;
using LinqKit; // üëà C·∫¶N TH∆Ø VI·ªÜN N√ÄY ƒê·ªÇ D√ôNG PredicateBuilder

namespace BookService.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChatbotController : ControllerBase
    {
        private readonly BookDBContext _context;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IConfiguration _config;

        public ChatbotController(BookDBContext context, IHttpClientFactory httpClientFactory, IConfiguration config)
        {
            _context = context;
            _httpClientFactory = httpClientFactory;
            _config = config;
        }

        [HttpGet("ping")]
        public IActionResult Ping() => Ok("Chatbot API is alive!");

        // --------------------------------------------------------------------------------------
        // ENDPOINT /api/chatbot/ask (D√πng cho to√†n h·ªá th·ªëng)
        // --------------------------------------------------------------------------------------
        [HttpPost("ask")]
        public async Task<IActionResult> Ask([FromBody] ChatRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Question))
                return BadRequest("Question cannot be empty");

            // 1Ô∏è‚É£ LOGIC T√åM KI·∫æM THEO T·ª™ KH√ìA (FUZZY SEARCH)
            var searchTerms = request.Question.ToLower().Split(new[] { ' ', ',', '.', ';', ':', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)
                                             .Where(t => t.Length > 2)
                                             .Distinct()
                                             .Take(5)
                                             .ToList();

            var booksQuery = _context.Books
                .Include(b => b.BookType)
                .AsExpandable(); // B·∫≠t LinqKit cho truy v·∫•n ch√≠nh

            var predicate = PredicateBuilder.New<Book>(true); // B·∫Øt ƒë·∫ßu v·ªõi ƒëi·ªÅu ki·ªán lu√¥n ƒë√∫ng

            // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán OR d·ª±a tr√™n t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm linh ho·∫°t
            if (searchTerms.Any())
            {
                var keywordPredicate = PredicateBuilder.New<Book>(false); // B·∫Øt ƒë·∫ßu v·ªõi ƒëi·ªÅu ki·ªán lu√¥n sai (cho OR)

                foreach (var term in searchTerms)
                {
                    var innerTerm = term; // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ ƒë√≥ng (closure issue)
                    keywordPredicate = keywordPredicate.Or(b =>
                        EF.Functions.ILike(b.Title, $"%{innerTerm}%") ||
                        (b.Author != null && EF.Functions.ILike(b.Author, $"%{innerTerm}%")) ||
                        (b.BookType != null && EF.Functions.ILike(b.BookType.Name, $"%{innerTerm}%")) ||
                        (b.Description != null && EF.Functions.ILike(b.Description, $"%{innerTerm}%"))
                    );
                }
                predicate = predicate.And(keywordPredicate); // √Åp d·ª•ng ƒëi·ªÅu ki·ªán OR v√†o truy v·∫•n ch√≠nh
            }

            var books = await booksQuery.Where(predicate)
                .OrderByDescending(b => b.AverageRating)
                .ThenByDescending(b => b.RatingsCount)
                .Take(5)
                .ToListAsync();

            // N·∫øu kh√¥ng t√¨m th·∫•y s√°ch n√†o d·ª±a tr√™n t·ª´ kh√≥a ho·∫∑c c√¢u h·ªèi chung chung (fallback)
            if (!books.Any() && searchTerms.Any() == false)
            {
                books = await _context.Books
                   .Include(b => b.BookType)
                   .OrderByDescending(b => b.RatingsCount)
                   .Take(5)
                   .ToListAsync();
            }


            // C·∫≠p nh·∫≠t: T·∫°o danh s√°ch BookInfo (CS1061/CS0019 ƒë√£ s·ª≠a)
            var bookInfos = books.Select(b => new BookInfo
            {
                Id = b.Id,
                Title = b.Title,
                BookstoreId = b.BookstoreId, // üëà ƒê√£ s·ª≠a l·ªói CS1061 v√† CS0019
                Price = b.Price,
                ImageUrl = b.ImageUrl
            }).ToList();


            string contextData = "D·ªØ li·ªáu t·ª´ h·ªá th·ªëng BookBridge:\n";
            foreach (var b in books)
            {
                contextData += $"- {b.Title} (ID: {b.Id}, {b.BookType?.Name ?? "Kh√¥ng r√µ th·ªÉ lo·∫°i"})\n";
                contextData += $"  T√°c gi·∫£: {b.Author ?? "Kh√¥ng r√µ"}\n";
                contextData += $"  Gi√°: {b.Price:C}, Rating trung b√¨nh: {b.AverageRating ?? 0}\n";
            }

            // 2Ô∏è‚É£ Chu·∫©n b·ªã request ƒë·∫øn Gemini API
            var http = _httpClientFactory.CreateClient();
            var apiKey = _config["Gemini:ApiKey"];
            http.DefaultRequestHeaders.TryAddWithoutValidation("User-Agent", "BookBridgeChatbot/1.0");
            http.DefaultRequestHeaders.TryAddWithoutValidation("Referer", "https://bookbridgebookservice.onrender.com");

            var prompt = $"B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh v·ªÅ s√°ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n ng·ªØ c·∫£nh sau. Khi nh·∫Øc ƒë·∫øn s√°ch, h√£y th√™m ID [ID] v√†o sau t√™n s√°ch.\n\n{contextData}\n\nNg∆∞·ªùi d√πng h·ªèi: {request.Question}";

            var body = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = prompt }
                        }
                    }
                }
            };

            var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={apiKey}";
            var response = await http.PostAsync(
                url,
                new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json")
            );

            var json = await response.Content.ReadAsStringAsync();
            var jsonDoc = JsonNode.Parse(json);
            var message = jsonDoc?["candidates"]?[0]?["content"]?["parts"]?[0]?["text"]?.ToString();

            if (string.IsNullOrEmpty(message))
            {
                return StatusCode(500, new { error = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI." });
            }

            // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho frontend, k√®m theo Books
            return Ok(new ChatbotResponse { Answer = message, Books = bookInfos });
        }

        // --------------------------------------------------------------------------------------
        // ENDPOINT /api/chatbot/ask/store (D√πng cho t·ª´ng c·ª≠a h√†ng)
        // --------------------------------------------------------------------------------------
        [HttpPost("ask/store")]
        public async Task<IActionResult> AskByStore([FromBody] StoreChatRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Message))
                return BadRequest("Message cannot be empty");

            if (request.BookstoreId <= 0)
                return BadRequest("BookstoreId ph·∫£i l·ªõn h∆°n 0");

            // 1Ô∏è‚É£ PH√ÇN T√çCH T·ª™ KH√ìA V√Ä GI√Å
            var searchTerms = request.Message.ToLower().Split(new[] { ' ', ',', '.', ';', ':', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)
                                             .Where(t => t.Length > 2)
                                             .Distinct()
                                             .ToList();
            var minPrice = 0m;
            var maxPrice = decimal.MaxValue;
            bool priceSearched = false;

            foreach (var term in searchTerms)
            {
                if (decimal.TryParse(term, out var priceValue))
                {
                    minPrice = priceValue;
                    maxPrice = decimal.MaxValue;
                    priceSearched = true;
                    break;
                }
            }

            var booksQuery = _context.Books
                .Include(b => b.BookType)
                .Where(b => b.BookstoreId == request.BookstoreId)
                .AsExpandable(); // B·∫≠t LinqKit

            var predicate = PredicateBuilder.New<Book>(true);

            // L·ªçc theo Gi√° n·∫øu c√≥ t·ª´ kh√≥a gi√°
            if (priceSearched)
            {
                predicate = predicate.And(b => b.Price >= minPrice && b.Price <= maxPrice);
            }

            // L·ªçc theo T·ª´ kh√≥a (FUZZY SEARCH)
            if (searchTerms.Any())
            {
                var keywordPredicate = PredicateBuilder.New<Book>(false);

                foreach (var term in searchTerms.Take(5))
                {
                    var innerTerm = term;
                    keywordPredicate = keywordPredicate.Or(b =>
                        EF.Functions.ILike(b.Title, $"%{innerTerm}%") ||
                        (b.Author != null && EF.Functions.ILike(b.Author, $"%{innerTerm}%")) ||
                        (b.BookType != null && EF.Functions.ILike(b.BookType.Name, $"%{innerTerm}%")) ||
                        (b.Description != null && EF.Functions.ILike(b.Description, $"%{innerTerm}%"))
                    );
                }
                predicate = predicate.And(keywordPredicate);
            }

            var books = await booksQuery.Where(predicate)
                .OrderByDescending(b => b.AverageRating)
                .ThenByDescending(b => b.RatingsCount)
                .Take(10)
                .ToListAsync();

            // ‚ö†Ô∏è Logic Fallback: N·∫øu kh√¥ng t√¨m th·∫•y s√°ch n√†o kh·ªõp, l·∫•y s√°ch ph·ªï bi·∫øn nh·∫•t c·ªßa c·ª≠a h√†ng ƒë√≥
            if (!books.Any())
            {
                books = await _context.Books
                    .Include(b => b.BookType)
                    .Where(b => b.BookstoreId == request.BookstoreId)
                    .OrderByDescending(b => b.RatingsCount)
                    .Take(5)
                    .ToListAsync();

                if (!books.Any())
                    return Ok(new ChatbotResponse { Answer = "Xin l·ªói, kh√¥ng t√¨m th·∫•y s√°ch n√†o trong c·ª≠a h√†ng n√†y.", Books = new List<BookInfo>() });
            }

            // T·∫°o danh s√°ch BookInfo (CS1061/CS0019 ƒë√£ s·ª≠a)
            var bookInfos = books.Select(b => new BookInfo
            {
                Id = b.Id,
                Title = b.Title,
                BookstoreId = b.BookstoreId, // üëà ƒê√£ s·ª≠a l·ªói CS1061 v√† CS0019
                Price = b.Price,
                ImageUrl = b.ImageUrl
            }).ToList();

            // 2Ô∏è‚É£ T·∫°o context chi ti·∫øt (d√πng cho prompt)
            string contextData = $"D·ªØ li·ªáu c√°c s√°ch trong c·ª≠a h√†ng {request.BookstoreId} li√™n quan ƒë·∫øn y√™u c·∫ßu:\n";
            foreach (var b in books)
            {
                contextData += $"- **{b.Title}** (ID: {b.Id}, {b.BookType?.Name ?? "Kh√¥ng r√µ th·ªÉ lo·∫°i"})\n";
                contextData += $"  T√°c gi·∫£: {b.Author ?? "Kh√¥ng r√µ"}\n";
                contextData += $"  Gi√°: {b.Price:C}, S·ªë l∆∞·ª£ng c√≤n: {b.Quantity}\n";
                contextData += $"  M√¥ t·∫£: {b.Description ?? "Kh√¥ng c√≥ m√¥ t·∫£"}\n";
            }

            // 3Ô∏è‚É£ G·ª≠i request ƒë·∫øn Gemini
            var http = _httpClientFactory.CreateClient();
            var apiKey = _config["Gemini:ApiKey"];
            http.DefaultRequestHeaders.TryAddWithoutValidation("User-Agent", "BookBridgeChatbot/1.0");
            http.DefaultRequestHeaders.TryAddWithoutValidation("Referer", "https://bookbridgebookservice.onrender.com");

            var prompt = $@"
B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh c√≥ th·ªÉ truy c·∫≠p database c·ªßa h·ªá th·ªëng. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi ng∆∞·ªùi d√πng d·ª±a tr√™n ng·ªØ c·∫£nh s√°ch ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y, v√† **lu√¥n lu√¥n** ƒë√≠nh k√®m d·ªØ li·ªáu s√°ch li√™n quan d∆∞·ªõi d·∫°ng JSON theo format b·∫Øt bu·ªôc.

--- CONTEXT D·ªÆ LI·ªÜU S√ÅCH ---
D·ªØ li·ªáu c√°c s√°ch trong c·ª≠a h√†ng {request.BookstoreId} li√™n quan ƒë·∫øn y√™u c·∫ßu:
{contextData}
--- END CONTEXT ---

Ng∆∞·ªùi d√πng h·ªèi: {request.Message}

--- H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI ---
1.  **Ph·∫£n h·ªìi:** Tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, h·ªØu √≠ch v√† l·ªãch s·ª±, s·ª≠ d·ª•ng ti·∫øng Vi·ªát.
2.  **ƒê·ªãnh d·∫°ng S√°ch:** Khi nh·∫Øc ƒë·∫øn t√™n s√°ch trong ph·∫ßn tr·∫£ l·ªùi t·ª± nhi√™n, h√£y k√®m theo ID c·ªßa s√°ch ƒë√≥ trong ngo·∫∑c vu√¥ng (v√≠ d·ª•: T√™n S√°ch [ID]) ƒë·ªÉ frontend c√≥ th·ªÉ t·∫°o li√™n k·∫øt.
3.  **D·ªØ li·ªáu JSON (B·∫ÆT BU·ªòC):** Lu√¥n ƒë√≠nh k√®m danh s√°ch s√°ch b·∫°n tham chi·∫øu/ƒë·ªÅ xu·∫•t v√†o cu·ªëi ph·∫£n h·ªìi theo ƒë·ªãnh d·∫°ng JSON sau:

    **a. B·∫Øt ƒë·∫ßu v·ªõi:** `----`
    **b. D·ªØ li·ªáu:** M·ªôt m·∫£ng JSON c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng s√°ch (ch·ªâ ch·ª©a Id, Title, BookstoreId). Ch·ªâ bao g·ªìm c√°c s√°ch b·∫°n ƒë√£ ƒë·ªÅ c·∫≠p ho·∫∑c tham kh·∫£o trong c√¢u tr·∫£ l·ªùi t·ª± nhi√™n.
    **c. K·∫øt th√∫c v·ªõi:** `----`

**V√≠ d·ª• v·ªÅ JSON S√°ch:**
----
[
    {{ ""Id"": 101, ""Title"": ""T√™n S√°ch Hay"", ""BookstoreId"": {request.BookstoreId} }},
    {{ ""Id"": 102, ""Title"": ""S√°ch Ti·∫øp Theo"", ""BookstoreId"": {request.BookstoreId} }}
]
----

H√£y b·∫Øt ƒë·∫ßu ph·∫£n h·ªìi c·ªßa b·∫°n ngay b√¢y gi·ªù.
"; // üëà ƒê√£ s·ª≠a l·ªói CS1733

            var body = new { contents = new[] { new { parts = new[] { new { text = prompt } } } } };

            var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={apiKey}";
            var response = await http.PostAsync(url, new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json"));

            var json = await response.Content.ReadAsStringAsync();
            var jsonDoc = JsonNode.Parse(json);
            var rawResponseText = jsonDoc?["candidates"]?[0]?["content"]?["parts"]?[0]?["text"]?.ToString();

            if (string.IsNullOrEmpty(rawResponseText))
                return StatusCode(500, new { error = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI." });

            // LOGIC PH√ÇN T√ÅCH PH·∫¢N H·ªíI (T√ÅCH TEXT V√Ä JSON)
            const string startDelimiter = "----";
            string naturalAnswer = rawResponseText;

            int startIndex = rawResponseText.IndexOf(startDelimiter);
            if (startIndex != -1)
            {
                naturalAnswer = rawResponseText.Substring(0, startIndex).Trim();
            }

            // Tr·∫£ v·ªÅ d·ªØ li·ªáu c·∫•u tr√∫c (JSON) ƒë·ªÉ h·ªó tr·ª£ li√™n k·∫øt
            return Ok(new ChatbotResponse { Answer = naturalAnswer, Books = bookInfos });
        }

        // --------------------------------------------------------------------------------------
        // MODELS
        // --------------------------------------------------------------------------------------
        // (Gi·ªØ nguy√™n ph·∫ßn Models)
        public class StoreChatRequest
        {
            public string Message { get; set; }
            public int BookstoreId { get; set; }
        }

        public class ChatbotResponse
        {
            public string Answer { get; set; }
            public List<BookInfo>? Books { get; set; }
        }

        public class BookInfo
        {
            [JsonPropertyName("id")]
            public int Id { get; set; }

            [JsonPropertyName("title")]
            public string Title { get; set; }

            [JsonPropertyName("bookstoreId")]
            public int BookstoreId { get; set; }

            [JsonPropertyName("price")]
            public decimal Price { get; set; }

            [JsonPropertyName("imageUrl")]
            public string ImageUrl { get; set; }
        }
    }

    public class ChatRequest
    {
        public string Question { get; set; }
    }
}